generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  parkingLotsCreated ParkingLot[] @relation("UserCreatedLots")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ParkingLot {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  address        String
  description    String?
  coordinates    Coordinates
  totalSpots     Int
  availableSpots Int
  isActive       Boolean       @default(true)
  parkingSpots   ParkingSpot[]
  layoutElements LayoutElement[]
  creatorId      String?       @db.ObjectId
  creator        User?         @relation("UserCreatedLots", fields: [creatorId], references: [id])
  layoutData     Json?         // For future layout editor
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model ParkingSpot {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  spotId      String      // e.g., "A1", "B2", etc.
  parkingLot  ParkingLot  @relation(fields: [parkingLotId], references: [id], onDelete: Cascade)
  parkingLotId String     @db.ObjectId
  coordinates Coordinates
  isOccupied  Boolean     @default(false)
  isActive    Boolean     @default(true)
  spotType    SpotType    @default(REGULAR)
  lastUpdated DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Sensor data fields
  deviceId    String?     // Ultrasonic sensor device ID
  sensorReadings SensorReading[]

  @@unique([parkingLotId, spotId])
}

model LayoutElement {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  parkingLot  ParkingLot    @relation(fields: [parkingLotId], references: [id], onDelete: Cascade)
  parkingLotId String       @db.ObjectId
  elementType LayoutElementType
  position    Position      // x, y coordinates on the grid
  size        Size          // width, height for scalable elements
  rotation    Float         @default(0) // rotation in degrees
  properties  Json?         // Additional properties for different element types
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

type Coordinates {
  lat Float
  lng Float
}

type Position {
  x Float
  y Float
}

type Size {
  width  Float
  height Float
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SpotType {
  REGULAR
  HANDICAP
  ELECTRIC_CHARGING
  MOTORCYCLE
  COMPACT
  RESERVED
}

enum LayoutElementType {
  PARKING_SPACE
  DRIVING_PATH
  ENTRANCE
  EXIT
  BARRIER
  SIGN
  LIGHTING
  VEGETATION
  BUILDING
  OTHER
}

// New model for sensor readings
model SensorReading {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  parkingSpot ParkingSpot @relation(fields: [parkingSpotId], references: [id], onDelete: Cascade)
  parkingSpotId String    @db.ObjectId
  distance    Float       // Distance in cm
  deviceId    String?     // Device ID that sent the reading
  timestamp   DateTime    @default(now())
  isOccupied  Boolean     // Calculated occupancy status
  createdAt   DateTime    @default(now())
}
